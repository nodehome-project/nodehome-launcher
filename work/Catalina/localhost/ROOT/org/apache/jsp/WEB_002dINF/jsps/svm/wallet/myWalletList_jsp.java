/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-04-19 01:44:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsps.svm.wallet;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import io.nodehome.svm.common.CPWalletUtil;
import io.nodehome.svm.common.biz.CoinListVO;
import io.nodehome.svm.common.util.EtcUtils;
import io.nodehome.svm.common.util.StringUtil;
import io.nodehome.svm.common.util.DateUtil;
import io.nodehome.cmm.FouriMessageSource;
import io.nodehome.cmm.service.GlobalProperties;
import io.nodehome.svm.common.CoinUtil;
import java.text.*;
import java.util.List;

public final class myWalletList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/home/fouri/work/nodehome-launcher-master/webapps/ROOT/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-4.1.2.RELEASE.jar", Long.valueOf(1555635137000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1555635137000L));
    _jspx_dependants.put("jar:file:/home/fouri/work/nodehome-launcher-master/webapps/ROOT/WEB-INF/lib/spring-webmvc-4.1.2.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1415631592000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("io.nodehome.svm.common.util.DateUtil");
    _jspx_imports_classes.add("io.nodehome.svm.common.CoinUtil");
    _jspx_imports_classes.add("org.json.simple.parser.JSONParser");
    _jspx_imports_classes.add("io.nodehome.svm.common.util.EtcUtils");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("io.nodehome.svm.common.biz.CoinListVO");
    _jspx_imports_classes.add("io.nodehome.svm.common.CPWalletUtil");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.json.simple.JSONObject");
    _jspx_imports_classes.add("org.json.simple.parser.ParseException");
    _jspx_imports_classes.add("io.nodehome.cmm.FouriMessageSource");
    _jspx_imports_classes.add("io.nodehome.cmm.service.GlobalProperties");
    _jspx_imports_classes.add("io.nodehome.svm.common.util.StringUtil");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");
response.setContentType("text/html; charset=utf-8");

// WID
String strAWID = request.getParameter("wid");
if (strAWID == null) strAWID = "";
String projectServiceid = GlobalProperties.getProperty("project_serviceid");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <title></title>\r\n");
      out.write("    <!-- Required meta tags -->\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <meta content=\"width=device-width, initial-scale=1.0; maximum-scale=1.0; minimum-scale=1.0; user-scalable=no;\" name=\"viewport\" />\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\r\n");
      out.write("\r\n");
      out.write("    <script src=\"/bootstrap/assets/js/core/jquery.min.js\"></script>\r\n");
      out.write("    \r\n");
      out.write("    <!--     Fonts and icons     -->\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Roboto+Slab:400,700|Material+Icons\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css\" />\r\n");
      out.write("\r\n");
      out.write("    <!-- Material Dashboard CSS -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"/bootstrap/assets/css/material-dashboard.css\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- CSS Just for demo purpose, don't include it in your project -->\r\n");
      out.write("    <link href=\"/bootstrap/assets/demo/demo.css\" rel=\"stylesheet\" />\r\n");
      out.write("    \r\n");
      out.write("    <link href=\"/css/loading.css\" rel=\"stylesheet\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.4.1/css/all.css\" integrity=\"sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz\" crossorigin=\"anonymous\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- Platform JS -->\r\n");
      out.write("    <script src=\"/js/loader.js\"></script>\r\n");
      out.write("    <script src=\"/js/common.js\"></script>\r\n");
      out.write("    <script src=\"/js/tapp_interface.js\"></script>\r\n");
      out.write("    \r\n");
      out.write("    <script>\r\n");
      out.write("\t$.ajaxSetup({ async:false }); // AJAX calls in order\r\n");
      out.write("\t\r\n");
      out.write("\t// Script to run as soon as loaded from the web\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t/* function AWI_OnBackPressedFromApp() {\r\n");
      out.write("\t\tlocation.href=\"/index\";\r\n");
      out.write("\t} */\r\n");
      out.write("\t\r\n");
      out.write("\tvar walletList = null;\r\n");
      out.write("\t// Function to call as soon as it is loaded from the App\r\n");
      out.write("\tfunction AWI_OnLoadFromApp(dtype) {\r\n");
      out.write("\t\t // Activate AWI_XXX method\r\n");
      out.write("\t\t AWI_ENABLE = true;\r\n");
      out.write("\t\t AWI_DEVICE = dtype;\r\n");
      out.write("\t\t \r\n");
      out.write("\t\t j_curWID = AWI_getAccountConfig(\"CUR_WID\");\r\n");
      out.write("\t\t j_curWNM = AWI_getAccountConfig(j_curWID);\r\n");
      out.write("\r\n");
      out.write("\t\t$('#loading').css('display','block');\r\n");
      out.write("\r\n");
      out.write("\t\tsetTimeout(function () {\r\n");
      out.write("\t\t\t // get wallet list\r\n");
      out.write("\t\t\t var joReturn = AWI_getWalletList();\r\n");
      out.write("\t\t\t var sResult = JSON.parse(joReturn);\r\n");
      out.write("\t\t\t var rowSelIdx = 0;\r\n");
      out.write("\t\t\t if(sResult['result']==\"OK\" && sResult['list']!=\"\" && sResult['list'].length>0) {\r\n");
      out.write("\t\t\t\twalletList = sResult['list'];\r\n");
      out.write("\t\t    \tvar sHTML=\"\";\r\n");
      out.write("\t\t    \tvar elmtTBody = $('#id_walletlist_table_tbody');\r\n");
      out.write("\t\t    \tfor(var i=0; i < walletList.length ; i ++) {\r\n");
      out.write("\t\t    \t\tvar vBalance = getBalance(walletList[i]['walletId']);\r\n");
      out.write("\t\t    \t\tif(vBalance!=\"\") {\r\n");
      out.write("\t\t\t    \t\tvar wallerNm = AWI_getAccountConfig(walletList[i]['walletId']);\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t    \t\tvar walletRegisted = false;\r\n");
      out.write("\t\t\t    \t\tvar configChk = AWI_getAccountConfig(\"REG_\"+walletList[i]['walletId']);\r\n");
      out.write("\t\t\t    \t\tif(configChk==\"\") {\r\n");
      out.write("\t\t\t\t    \t\tvar data = WSI_callJsonAPI(\"/svm/wallet/queryWalletInfo\", {\"serviceId\":\"");
      out.print(GlobalProperties.getProperty("project_serviceid"));
      out.write("\", \"walletId\":walletList[i]['walletId']} );\r\n");
      out.write("\t\t\t\t    \t\tif(data.result==\"OK\") {\r\n");
      out.write("\t\t\t\t    \t\t\twalletRegisted = true;\r\n");
      out.write("\t\t\t\t    \t\t\tAWI_setAccountConfig(\"REG_\"+walletList[i]['walletId'],\"Y\");\t// Whether to register in the chain\r\n");
      out.write("\t\t\t\t    \t\t} else {\r\n");
      out.write("\t\t\t\t    \t\t\tAWI_setAccountConfig(\"REG_\"+walletList[i]['walletId'],\"N\");\t// Whether to register in the chain\r\n");
      out.write("\t\t\t\t    \t\t}\r\n");
      out.write("\t\t\t    \t\t} else {\r\n");
      out.write("\t\t\t    \t\t\tif(configChk==\"Y\") walletRegisted = true;\r\n");
      out.write("\t\t\t    \t\t}\r\n");
      out.write("\t\t\t    \t\tsHTML += '<tr id=\"id_WalletID_' + i + '\" style=\"background-color:#ffffff;\">';\r\n");
      out.write("\t\t\t    \t\tsHTML += '<td>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t<div class=\"form-radio\">';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t<label class=\"form-radio-label\">';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t<input class=\"form-radio-input\" type=\"radio\" name=\"name_WalletID\" value=\"' + walletList[i]['walletId'] + '\"/>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t<input type=\"hidden\" name=\"name_WalletNM\" value=\"' + wallerNm + '\"/>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t<input type=\"hidden\" name=\"walletRegisted\" value=\"' + walletRegisted + '\"/>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t<input type=\"hidden\" name=\"walletBalance\" value=\"' + vBalance + '\"/>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t<span class=\"form-radio-sign\">';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t<span class=\"radio\"></span>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t</span>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t\t</label>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '\t</div>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '</td>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '<td>' + wallerNm + '</td>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '<td style=\"word-break: break-all;\"><span style=\"font-size:16px; font-weight:bold; color:#f58903;\">' + gfnAddComma(parseInt( vBalance )/");
      out.print(CoinUtil.DISPLAY_COIN_UNIT);
      out.write(") + '</span> <span style=\"font-size:14px;\" class=\"aaa\"> ");
      out.print(CoinListVO.getCoinCou());
      out.write("</span></td>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '<td>';\r\n");
      out.write("\t\t\t    \t\tif(walletRegisted)\r\n");
      out.write("\t\t\t    \t\t\tsHTML += '<i class=\"fas fa-infinity\"></i>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '</td>';\r\n");
      out.write("\t\t\t    \t\tsHTML += '</tr>';\r\n");
      out.write("\t\t   \t  \t\t\tif (j_curWID == walletList[i]['walletId']) {\r\n");
      out.write("\t\t   \t\t\t\t\trowSelIdx = i;\r\n");
      out.write("\t\t   \t\t\t    }\r\n");
      out.write("\t\t    \t\t}\r\n");
      out.write("\t\t    \t}\r\n");
      out.write("\t\t    \telmtTBody.html(sHTML);\r\n");
      out.write("\t\t    \t//document.getElementById(\"id_WalletID_\"+rowSelIdx).style.backgroundColor = \"#d9e8ff\";\r\n");
      out.write("\t\t\t\t$('#loading').css('display','none');\r\n");
      out.write("\t\t\t } else {\r\n");
      out.write("\t\t\t\t $('#loading').css('display','none');\r\n");
      out.write("\t\t\t }\r\n");
      out.write("\t\t}, 10);\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction getBalance(pWalletId) {\r\n");
      out.write("\t\tvar sNonce = \"\";\t// nonce string\r\n");
      out.write("\t\tvar sSig = \"\";\t\t// signature string\r\n");
      out.write("\t\tvar sNpid = \"\";\t\t// NA connect id\r\n");
      out.write("\t\tvar rtnBalance = 0;\t// Balance\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// ************ step1 : get Nonce / SVM API\r\n");
      out.write("\t\tvar sQuery = {\"pid\":\"PID\", \"ver\":\"10000\", \"nType\":\"query\"};\r\n");
      out.write("\t\tvar retData = WSI_callJsonAPI(\"/svm/common/getNonce\", sQuery);\r\n");
      out.write("\t\tif(retData['result'] == \"OK\") {\r\n");
      out.write("\t\t\tsNonce = retData['nonce'];\r\n");
      out.write("\t\t\tsNpid = retData['npid'];\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// ************ step2 : get Signature / S-T API\r\n");
      out.write("\t\tsQuery = [\"PID\",\"10000\",sNonce];\r\n");
      out.write("\t\tvar sigRes = AWI_getSignature(pWalletId, sQuery,\"query\",\"getBalance\");\r\n");
      out.write("\t\tif(sigRes['result']==\"OK\") {\r\n");
      out.write("\t\t\tsSig = sigRes['signature_key'];\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// ************ step3 : get Balance / SVM API\r\n");
      out.write("\t\t\tsQuery = {\"npid\":sNpid, \"parameterArgs\" : [\"PID\",\"10000\",sNonce,sSig,pWalletId]};\r\n");
      out.write("\t\t\tretData = WSI_callJsonAPI(\"/svm/wallet/getBalance\", sQuery);\r\n");
      out.write("\t\t\tif(retData['result'] == \"OK\") {\r\n");
      out.write("\t\t\t\trtnBalance = retData['balance'];\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\treturn '';\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn rtnBalance;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// Delete wallet\r\n");
      out.write("\tfunction FnDeleteWallet() {\r\n");
      out.write("\t\tvar selId = \"\";\r\n");
      out.write("\t\tif(frm.name_WalletID && frm.name_WalletID.length>0) {\r\n");
      out.write("\t\t\tfor(var i=0; i<frm.name_WalletID.length; i++) {\r\n");
      out.write("\t\t\t\tif(frm.name_WalletID[i].checked) {\r\n");
      out.write("\t\t\t\t\tselId = frm.name_WalletID[i].value;\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(selId==\"\") {\r\n");
      out.write("\t\t\tif(frm.name_WalletID.checked) {\r\n");
      out.write("\t\t\t\tselId = frm.name_WalletID.value;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(selId!=\"\") {\r\n");
      out.write("\t\t\tif(confirm('");
      if (_jspx_meth_spring_005fmessage_005f0(_jspx_page_context))
        return;
      out.write("')) {\r\n");
      out.write("\t\t\t\tvar sReturn = AWI_deleteWallet(selId);\r\n");
      out.write("\t\t\t\tvar joReturn = JSON.parse(sReturn);\r\n");
      out.write("\t\t\t\tif (joReturn['result'] == 'OK') {\r\n");
      out.write("\t\t\t\t\tlocation.reload();\r\n");
      out.write("\t\t\t\t}\t\r\n");
      out.write("\t\t\t}\t\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\talert('");
      if (_jspx_meth_spring_005fmessage_005f1(_jspx_page_context))
        return;
      out.write("');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction FnSelectWallet() {\r\n");
      out.write("\t\tvar selId = \"\";\r\n");
      out.write("\t\tvar selNm = \"\";\r\n");
      out.write("\t\tif(frm.name_WalletID && frm.name_WalletID.length>0) {\r\n");
      out.write("\t\t\tfor(var i=0; i<frm.name_WalletID.length; i++) {\r\n");
      out.write("\t\t\t\tif(frm.name_WalletID[i].checked) {\r\n");
      out.write("\t\t\t\t\tselId = frm.name_WalletID[i].value;\r\n");
      out.write("\t\t\t\t\tselNm = frm.name_WalletNM[i].value;\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(selId==\"\") {\r\n");
      out.write("\t\t\tif(frm.name_WalletID.checked) {\r\n");
      out.write("\t\t\t\tselId = frm.name_WalletID.value;\r\n");
      out.write("\t\t\t\tselNm = frm.name_WalletNM.value;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(selId!=\"\") {\r\n");
      out.write("\t\t\tif(confirm(selNm + ' ");
      if (_jspx_meth_spring_005fmessage_005f2(_jspx_page_context))
        return;
      out.write("')) {\r\n");
      out.write("\t\t\t\tAWI_setAccountConfig(\"CUR_WID\",selId);\r\n");
      out.write("\t\t\t\tlocation.href = \"/index?wid=\"+selId;\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\talert('");
      if (_jspx_meth_spring_005fmessage_005f3(_jspx_page_context))
        return;
      out.write("');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction FnAddWallet() {\r\n");
      out.write("\t\tvar selId = \"\";\r\n");
      out.write("\t\tvar selNm = \"\";\r\n");
      out.write("\t\tvar walletRegisted = \"\";\r\n");
      out.write("\t\tvar iWalletBalance = 0;\r\n");
      out.write("\t\tvar regFee = parseInt(\"");
      out.print(CoinListVO.getWalletRegFee());
      out.write("\");\r\n");
      out.write("\t\tif(frm.name_WalletID && frm.name_WalletID.length>0) {\r\n");
      out.write("\t\t\tfor(var i=0; i<frm.name_WalletID.length; i++) {\r\n");
      out.write("\t\t\t\tif(frm.name_WalletID[i].checked) {\r\n");
      out.write("\t\t\t\t\tselId = frm.name_WalletID[i].value;\r\n");
      out.write("\t\t\t\t\tselNm = frm.name_WalletNM[i].value;\r\n");
      out.write("\t\t\t\t\twalletRegisted = frm.walletRegisted[i].value;\r\n");
      out.write("\t\t\t\t\tiWalletBalance = frm.walletBalance[i].value;\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(selId==\"\") {\r\n");
      out.write("\t\t\tif(frm.name_WalletID.checked) {\r\n");
      out.write("\t\t\t\tselId = frm.name_WalletID.value;\r\n");
      out.write("\t\t\t\tselNm = frm.name_WalletNM.value;\r\n");
      out.write("\t\t\t\twalletRegisted = frm.walletRegisted.value;\r\n");
      out.write("\t\t\t\tiWalletBalance = frm.walletBalance.value;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(regFee > iWalletBalance) {\r\n");
      out.write("\t\t\talert('");
      if (_jspx_meth_spring_005fmessage_005f4(_jspx_page_context))
        return;
      out.write(' ');
      if (_jspx_meth_spring_005fmessage_005f5(_jspx_page_context))
        return;
      out.write('(');
      out.print(CoinUtil.calcDisplayCoin(Double.parseDouble(CoinListVO.getWalletRegFee())));
      out.write(' ');
      out.print(CoinListVO.getCoinCou());
      out.write(")');\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(selId!=\"\") {\r\n");
      out.write("\t\t\tlocation.href=\"/svm/wallet/registWalletForm?sWid=\"+selId;\t\t\t\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\talert('지갑을 선택하세요.');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction FnBlockUseWallet() {\r\n");
      out.write("\t\tvar selId = \"\";\r\n");
      out.write("\t\tvar selNm = \"\";\r\n");
      out.write("\t\tvar walletRegisted = \"\";\r\n");
      out.write("\t\tvar iWalletBalance = 0;\r\n");
      out.write("\t\tvar regFee = parseInt(\"");
      out.print(CoinListVO.getWalletRegFee());
      out.write("\");\r\n");
      out.write("\t\tif(frm.name_WalletID && frm.name_WalletID.length>0) {\r\n");
      out.write("\t\t\tfor(var i=0; i<frm.name_WalletID.length; i++) {\r\n");
      out.write("\t\t\t\tif(frm.name_WalletID[i].checked) {\r\n");
      out.write("\t\t\t\t\tselId = frm.name_WalletID[i].value;\r\n");
      out.write("\t\t\t\t\tselNm = frm.name_WalletNM[i].value;\r\n");
      out.write("\t\t\t\t\twalletRegisted = frm.walletRegisted[i].value;\r\n");
      out.write("\t\t\t\t\tiWalletBalance = frm.walletBalance[i].value;\r\n");
      out.write("\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(selId==\"\") {\r\n");
      out.write("\t\t\tif(frm.name_WalletID.checked) {\r\n");
      out.write("\t\t\t\tselId = frm.name_WalletID.value;\r\n");
      out.write("\t\t\t\tselNm = frm.name_WalletNM.value;\r\n");
      out.write("\t\t\t\twalletRegisted = frm.walletRegisted.value;\r\n");
      out.write("\t\t\t\tiWalletBalance = frm.walletBalance.value;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar minRemitt = \"");
      out.print(CoinListVO.getMinRemittanceAmount() );
      out.write("\";\r\n");
      out.write("\t\tif(minRemitt <= iWalletBalance) {\r\n");
      out.write("\t\t\talert('");
      if (_jspx_meth_spring_005fmessage_005f6(_jspx_page_context))
        return;
      out.write("'+minRemitt+' ");
      out.print(CoinListVO.getCoinCou());
      out.write("');\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar confm = confirm('");
      if (_jspx_meth_spring_005fmessage_005f7(_jspx_page_context))
        return;
      out.write("');\r\n");
      out.write("\t\tif(confm) {\r\n");
      out.write("\t\t\tif(selId!=\"\") {\r\n");
      out.write("\t\t\t\t$('#loading').css('display','block');\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tsetTimeout(function () {\r\n");
      out.write("\t\t\t\t\t// ************ step1 : get Nonce / SVM API\r\n");
      out.write("\t\t\t\t\tvar sQuery = {\"pid\":\"PID\", \"ver\":\"10000\", \"serviceId\":\"");
      out.print(projectServiceid);
      out.write("\"};\r\n");
      out.write("\t\t\t\t\tvar retData = WSI_callJsonAPI(\"/svm/common/getNonce\", sQuery);\r\n");
      out.write("\t\t\t\t\tif(retData['result'] == \"OK\") {\r\n");
      out.write("\t\t\t\t\t\tsNonce = retData['nonce'];\r\n");
      out.write("\t\t\t\t\t\tsNpid = retData['npid'];\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t$('#loading').css('display','none');\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// ************ step2 : get Signature / S-T API\r\n");
      out.write("\t\t\t\t\tsQuery = [\"PID\",\"10000\",sNonce];\r\n");
      out.write("\t\t\t\t\tvar sigRes = AWI_getSignature(selId, sQuery,\"invoke\",\"registerBlacklistUser\");\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif(sigRes['result']==\"OK\") {\r\n");
      out.write("\t\t\t\t\t\tsSig = sigRes['signature_key'];\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t// ************ step3 : SVM API\r\n");
      out.write("\t\t\t\t\t\tvar sArgs = [\"PID\",\"10000\",sNonce,sSig,selId];\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tsQuery = {\"npid\":sNpid, \"serviceId\":\"");
      out.print(projectServiceid);
      out.write("\", \"parameterArgs\" : sArgs};\r\n");
      out.write("\t\t\t\t\t\tretData = WSI_callJsonAPI(\"/svm/wallet/registerBlacklistUser\", sQuery);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (retData['ec'] == \"0\") {\r\n");
      out.write("\t\t\t\t\t\t\tlocation.reload();\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t$('#loading').css('display','none');\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},10);\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\talert('");
      if (_jspx_meth_spring_005fmessage_005f8(_jspx_page_context))
        return;
      out.write("');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("  </head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    \r\n");
      out.write("  <!-- Content : S -->\r\n");
      out.write("  <div class=\"wrapper \">   \r\n");
      out.write("  \t<div id=\"loading\" class=\"loading\" style=\"display:none;\"><img id=\"loading_img\" alt=\"loading\" src=\"/images/viewLoading.gif\" /></div>\r\n");
      out.write("  \t  \r\n");
      out.write("    <div class=\"content\">\r\n");
      out.write("      <div class=\"container-fluid\">\r\n");
      out.write("          \r\n");
      out.write("          <form name=\"frm\" id=\"frm\" method=\"post\" onsubmit=\"return false;\" class=\"form-horizontal\">\r\n");
      out.write("\t\t  <input type=\"hidden\" name=\"nonce\" id=\"nonce\" />\r\n");
      out.write("          <input type=\"hidden\" name=\"npid\" id=\"npid\" />\r\n");
      out.write("\t\t        \r\n");
      out.write("          <div class=\"row\">\r\n");
      out.write("            <div class=\"col-lg-12 col-md-12\">\r\n");
      out.write("              <div class=\"card\">\r\n");
      out.write("                <div class=\"card-header card-header-warning\">\r\n");
      out.write("                  <h4 class=\"card-title\">");
      if (_jspx_meth_spring_005fmessage_005f9(_jspx_page_context))
        return;
      out.write("</h4>\r\n");
      out.write("                  <p class=\"card-category\">Wallet List</p>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"card-body table-responsive\">\r\n");
      out.write("                  <table class=\"table table-hover\">\r\n");
      out.write("                    <thead class=\"text-warning\">\r\n");
      out.write("                      <th>ID</th>\r\n");
      out.write("                      <th>Name</th>\r\n");
      out.write("                      <th>Balance</th>\r\n");
      out.write("                      <th></th>\r\n");
      out.write("                    </thead>                    \r\n");
      out.write("                    <tbody id='id_walletlist_table_tbody'>\r\n");
      out.write("\t\t\t\t\t</tbody>\t\t\t\t\t\r\n");
      out.write("                  </table>\r\n");
      out.write("                  ");
      if (_jspx_meth_spring_005fmessage_005f10(_jspx_page_context))
        return;
      out.write(" : <i class=\"fas fa-infinity\"></i> ");
      if (_jspx_meth_spring_005fmessage_005f11(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("              </div>\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>\r\n");
      out.write("          \r\n");
      out.write("\t\t\t<hr class=\"colorgraph\">\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"col-12\"><input type=\"button\" value=\"");
      if (_jspx_meth_spring_005fmessage_005f12(_jspx_page_context))
        return;
      out.write("\" class=\"btn btn-success btn-lg btn-block\" onclick=\"FnSelectWallet();\" /></div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"col-6\"><input type=\"button\" value=\"");
      if (_jspx_meth_spring_005fmessage_005f13(_jspx_page_context))
        return;
      out.write("\" class=\"btn btn-warning btn-lg btn-block\" onclick=\"FnDeleteWallet();\" /></div>\r\n");
      out.write("\t\t\t\t<div class=\"col-6\"><input type=\"button\" value=\"");
      if (_jspx_meth_spring_005fmessage_005f14(_jspx_page_context))
        return;
      out.write("\" class=\"btn btn-warning btn-lg btn-block\" onclick=\"FnAddWallet();\" /></div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"col-12\"><input type=\"button\" value=\"");
      if (_jspx_meth_spring_005fmessage_005f15(_jspx_page_context))
        return;
      out.write("\" class=\"btn btn-warning btn-lg btn-block\" onclick=\"FnBlockUseWallet();\" /></div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div style=\"padding-bottom:20px;\"></div>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("          </form>\r\n");
      out.write("          \r\n");
      out.write("          \r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("  <!-- Content : E -->\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    <!--   Core JS Files   -->\r\n");
      out.write("    <script src=\"/bootstrap/assets/js/core/popper.min.js\"></script>\r\n");
      out.write("    <script src=\"/bootstrap/assets/js/bootstrap-material-design.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!--  Notifications Plugin, full documentation here: http://bootstrap-notify.remabledesigns.com/    -->\r\n");
      out.write("    <script src=\"/bootstrap/assets/js/plugins/bootstrap-notify.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!--  Charts Plugin, full documentation here: https://gionkunz.github.io/chartist-js/ -->\r\n");
      out.write("    <script src=\"/bootstrap/assets/js/core/chartist.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!-- Plugin for Scrollbar documentation here: https://github.com/utatti/perfect-scrollbar -->\r\n");
      out.write("    <script src=\"/bootstrap/assets/js/plugins/perfect-scrollbar.jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!-- Demo init -->\r\n");
      out.write("    <script src=\"/bootstrap/assets/js/plugins/demo.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!-- Material Dashboard Core initialisations of plugins and Bootstrap Material Design Library -->\r\n");
      out.write("    <script src=\"/bootstrap/assets/js/material-dashboard.js?v=2.1.0\"></script>\r\n");
      out.write("  \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_spring_005fmessage_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f0 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f0_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f0.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(195,15) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f0.setCode("wallet.msg.delwallet");
      int[] _jspx_push_body_count_spring_005fmessage_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f0 = _jspx_th_spring_005fmessage_005f0.doStartTag();
        if (_jspx_th_spring_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f0);
      _jspx_th_spring_005fmessage_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f0, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f1 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f1_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f1.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f1.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(203,10) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f1.setCode("body.msg.select.please.wallet");
      int[] _jspx_push_body_count_spring_005fmessage_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f1 = _jspx_th_spring_005fmessage_005f1.doStartTag();
        if (_jspx_th_spring_005fmessage_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f1);
      _jspx_th_spring_005fmessage_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f1, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f2 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f2_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f2.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f2.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(226,24) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f2.setCode("body.msg.select.wallet");
      int[] _jspx_push_body_count_spring_005fmessage_005f2 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f2 = _jspx_th_spring_005fmessage_005f2.doStartTag();
        if (_jspx_th_spring_005fmessage_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f2[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f2.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f2.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f2);
      _jspx_th_spring_005fmessage_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f2, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f3 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f3_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f3.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f3.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(232,10) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f3.setCode("body.msg.select.please.wallet");
      int[] _jspx_push_body_count_spring_005fmessage_005f3 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f3 = _jspx_th_spring_005fmessage_005f3.doStartTag();
        if (_jspx_th_spring_005fmessage_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f3[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f3.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f3.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f3);
      _jspx_th_spring_005fmessage_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f3, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f4(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f4 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f4_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f4.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f4.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(262,10) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f4.setCode("wallet.msg.addwallet.fail3");
      int[] _jspx_push_body_count_spring_005fmessage_005f4 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f4 = _jspx_th_spring_005fmessage_005f4.doStartTag();
        if (_jspx_th_spring_005fmessage_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f4[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f4.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f4.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f4);
      _jspx_th_spring_005fmessage_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f4, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f5(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f5 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f5_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f5.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f5.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(262,63) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f5.setCode("body.text.wallet.regist.fee");
      int[] _jspx_push_body_count_spring_005fmessage_005f5 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f5 = _jspx_th_spring_005fmessage_005f5.doStartTag();
        if (_jspx_th_spring_005fmessage_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f5[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f5.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f5.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f5);
      _jspx_th_spring_005fmessage_005f5_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f5, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f5_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f6(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f6 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f6_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f6.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f6.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(300,10) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f6.setCode("wallet.msg.stop.wallet.confirm2");
      int[] _jspx_push_body_count_spring_005fmessage_005f6 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f6 = _jspx_th_spring_005fmessage_005f6.doStartTag();
        if (_jspx_th_spring_005fmessage_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f6[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f6.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f6.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f6);
      _jspx_th_spring_005fmessage_005f6_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f6, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f6_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f7(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f7 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f7_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f7.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f7.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(304,23) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f7.setCode("wallet.msg.stop.wallet.confirm1");
      int[] _jspx_push_body_count_spring_005fmessage_005f7 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f7 = _jspx_th_spring_005fmessage_005f7.doStartTag();
        if (_jspx_th_spring_005fmessage_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f7[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f7.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f7.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f7);
      _jspx_th_spring_005fmessage_005f7_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f7, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f7_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f8(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f8 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f8_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f8.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f8.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(342,11) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f8.setCode("body.msg.select.please.wallet");
      int[] _jspx_push_body_count_spring_005fmessage_005f8 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f8 = _jspx_th_spring_005fmessage_005f8.doStartTag();
        if (_jspx_th_spring_005fmessage_005f8.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f8[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f8.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f8.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f8);
      _jspx_th_spring_005fmessage_005f8_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f8, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f8_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f9(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f9 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f9_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f9.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f9.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(366,41) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f9.setCode("body.text.mywallet.list");
      int[] _jspx_push_body_count_spring_005fmessage_005f9 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f9 = _jspx_th_spring_005fmessage_005f9.doStartTag();
        if (_jspx_th_spring_005fmessage_005f9.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f9[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f9.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f9.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f9);
      _jspx_th_spring_005fmessage_005f9_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f9, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f9_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f10(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f10 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f10_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f10.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f10.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(380,18) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f10.setCode("title.description");
      int[] _jspx_push_body_count_spring_005fmessage_005f10 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f10 = _jspx_th_spring_005fmessage_005f10.doStartTag();
        if (_jspx_th_spring_005fmessage_005f10.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f10[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f10.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f10.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f10);
      _jspx_th_spring_005fmessage_005f10_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f10, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f10_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f11(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f11 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f11_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f11.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f11.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(380,96) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f11.setCode("body.text.regist.blockchain.check");
      int[] _jspx_push_body_count_spring_005fmessage_005f11 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f11 = _jspx_th_spring_005fmessage_005f11.doStartTag();
        if (_jspx_th_spring_005fmessage_005f11.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f11[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f11.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f11.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f11);
      _jspx_th_spring_005fmessage_005f11_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f11, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f11_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f12(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f12 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f12_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f12.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f12.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(388,52) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f12.setCode("user.button.selectWallet");
      int[] _jspx_push_body_count_spring_005fmessage_005f12 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f12 = _jspx_th_spring_005fmessage_005f12.doStartTag();
        if (_jspx_th_spring_005fmessage_005f12.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f12[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f12.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f12.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f12);
      _jspx_th_spring_005fmessage_005f12_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f12, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f12_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f13(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f13 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f13_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f13.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f13.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(391,51) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f13.setCode("user.button.deleteWallet");
      int[] _jspx_push_body_count_spring_005fmessage_005f13 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f13 = _jspx_th_spring_005fmessage_005f13.doStartTag();
        if (_jspx_th_spring_005fmessage_005f13.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f13[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f13.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f13.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f13);
      _jspx_th_spring_005fmessage_005f13_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f13, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f13_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f14(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f14 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f14_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f14.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f14.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(392,51) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f14.setCode("user.button.addUpdateWallet");
      int[] _jspx_push_body_count_spring_005fmessage_005f14 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f14 = _jspx_th_spring_005fmessage_005f14.doStartTag();
        if (_jspx_th_spring_005fmessage_005f14.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f14[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f14.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f14.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f14);
      _jspx_th_spring_005fmessage_005f14_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f14, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f14_reused);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f15(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f15 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    boolean _jspx_th_spring_005fmessage_005f15_reused = false;
    try {
      _jspx_th_spring_005fmessage_005f15.setPageContext(_jspx_page_context);
      _jspx_th_spring_005fmessage_005f15.setParent(null);
      // /WEB-INF/jsps/svm/wallet/myWalletList.jsp(395,52) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_spring_005fmessage_005f15.setCode("user.button.wallet.block.use");
      int[] _jspx_push_body_count_spring_005fmessage_005f15 = new int[] { 0 };
      try {
        int _jspx_eval_spring_005fmessage_005f15 = _jspx_th_spring_005fmessage_005f15.doStartTag();
        if (_jspx_th_spring_005fmessage_005f15.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_spring_005fmessage_005f15[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_spring_005fmessage_005f15.doCatch(_jspx_exception);
      } finally {
        _jspx_th_spring_005fmessage_005f15.doFinally();
      }
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f15);
      _jspx_th_spring_005fmessage_005f15_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_spring_005fmessage_005f15, _jsp_getInstanceManager(), _jspx_th_spring_005fmessage_005f15_reused);
    }
    return false;
  }
}
